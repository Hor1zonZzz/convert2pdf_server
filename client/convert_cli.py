#!/usr/bin/env python3
"""
Convert2PDF ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑

‰ΩøÁî®ÊñπÊ≥ï:
    python convert_cli.py --host 192.168.1.100 --port 7758 --input ./documents
    python convert_cli.py -h 192.168.1.100 -p 7758 -i ./documents -o ./output -w 10
"""

import argparse
import asyncio
import sys
from pathlib import Path
import json
from convert_client import ConvertClient, convert_directory_simple


def create_parser():
    """ÂàõÂª∫ÂëΩ‰ª§Ë°åÂèÇÊï∞Ëß£ÊûêÂô®"""
    parser = argparse.ArgumentParser(
        description="Convert2PDF ÂÆ¢Êà∑Á´Ø - ÊâπÈáèÂ∞ÜÊñáÊ°£ËΩ¨Êç¢‰∏∫PDF",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
‰ΩøÁî®Á§∫‰æã:
  Âü∫Á°Ä‰ΩøÁî®Ôºö
    python convert_cli.py --host 192.168.1.100 --port 7758 --input ./documents
    
  È´òÁ∫ß‰ΩøÁî®Ôºö
    python convert_cli.py -h 192.168.1.100 -p 7758 -i ./documents -o ./output -w 10 -r
    
  ÊµãËØïËøûÊé•Ôºö
    python convert_cli.py --host 192.168.1.100 --port 7758 --test
        """
    )
    
    # ÂøÖÈúÄÂèÇÊï∞
    parser.add_argument(
        "--host", "-H",
        required=True,
        help="ÊúçÂä°Á´ØIPÂú∞ÂùÄ (‰æãÂ¶Ç: 192.168.1.100)"
    )
    
    parser.add_argument(
        "--port", "-p",
        type=int,
        default=7758,
        help="ÊúçÂä°Á´ØÁ´ØÂè£ (ÈªòËÆ§: 7758)"
    )
    
    # ËæìÂÖ•ËæìÂá∫
    parser.add_argument(
        "--input", "-i",
        help="ËæìÂÖ•ÁõÆÂΩïË∑ØÂæÑ (ÂåÖÂê´Ë¶ÅËΩ¨Êç¢ÁöÑÊñá‰ª∂)"
    )
    
    parser.add_argument(
        "--output", "-o", 
        help="ËæìÂá∫ÁõÆÂΩïË∑ØÂæÑ (ÂèØÈÄâÔºåÈªòËÆ§‰∏∫ËæìÂÖ•ÁõÆÂΩïÁöÑÁà∂ÁõÆÂΩï)"
    )
    
    # ËΩ¨Êç¢ÈÄâÈ°π
    parser.add_argument(
        "--workers", "-w",
        type=int,
        default=5,
        help="Âπ∂ÂèëËΩ¨Êç¢Êï∞ (ÈªòËÆ§: 5)"
    )
    
    parser.add_argument(
        "--recursive", "-r",
        action="store_true",
        help="ÈÄíÂΩíÊêúÁ¥¢Â≠êÁõÆÂΩï"
    )
    
    parser.add_argument(
        "--no-save-results",
        action="store_true", 
        help="‰∏ç‰øùÂ≠òÁªìÊûúÂà∞JSONÊñá‰ª∂"
    )
    
    # ËøûÊé•ÈÄâÈ°π
    parser.add_argument(
        "--timeout",
        type=int,
        default=300,
        help="ËØ∑Ê±ÇË∂ÖÊó∂Êó∂Èó¥ÔºàÁßíÔºåÈªòËÆ§: 300Ôºâ"
    )
    
    parser.add_argument(
        "--retries",
        type=int, 
        default=3,
        help="ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ (ÈªòËÆ§: 3)"
    )
    
    # ÂäüËÉΩÈÄâÈ°π
    parser.add_argument(
        "--test",
        action="store_true",
        help="‰ªÖÊµãËØïËøûÊé•Ôºå‰∏çÊâßË°åËΩ¨Êç¢"
    )
    
    parser.add_argument(
        "--list-types",
        action="store_true",
        help="ÂàóÂá∫ÊúçÂä°Á´ØÊîØÊåÅÁöÑÊñá‰ª∂Á±ªÂûã"
    )
    
    parser.add_argument(
        "--quiet", "-q",
        action="store_true",
        help="ÈùôÈªòÊ®°ÂºèÔºåÂáèÂ∞ëËæìÂá∫"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version="Convert2PDF Client v1.0.0"
    )
    
    return parser


async def test_connection(host: str, port: int) -> bool:
    """ÊµãËØï‰∏éÊúçÂä°Á´ØÁöÑËøûÊé•"""
    try:
        client = ConvertClient(host, port)
        success = await client.connect()
        
        if success:
            print(f"‚úÖ ÊàêÂäüËøûÊé•Âà∞ÊúçÂä°Á´Ø {host}:{port}")
            print(f"üìã ÊúçÂä°Á´ØÊîØÊåÅ {len(client.supported_types)} ÁßçÊñá‰ª∂Ê†ºÂºè")
            return True
        else:
            print(f"‚ùå Êó†Ê≥ïËøûÊé•Âà∞ÊúçÂä°Á´Ø {host}:{port}")
            return False
            
    except Exception as e:
        print(f"‚ùå ËøûÊé•ÊµãËØïÂ§±Ë¥•: {e}")
        return False


async def list_supported_types(host: str, port: int):
    """ÂàóÂá∫ÊúçÂä°Á´ØÊîØÊåÅÁöÑÊñá‰ª∂Á±ªÂûã"""
    try:
        client = ConvertClient(host, port)
        if await client.connect():
            print(f"üìã ÊúçÂä°Á´Ø {host}:{port} ÊîØÊåÅÁöÑÊñá‰ª∂Á±ªÂûã:")
            print("=" * 50)
            
            # ÊåâÁ±ªÂà´ÂàÜÁªÑÊòæÁ§∫ÔºàÁÆÄÂçïÂàÜÁ±ªÔºâ
            categories = {
                "ÊñáÊ°£": [".doc", ".docx", ".odt", ".rtf", ".txt"],
                "Ë°®Ê†º": [".xls", ".xlsx", ".ods", ".csv"],
                "ÊºîÁ§∫": [".ppt", ".pptx", ".odp"],
                "ÂÖ∂‰ªñ": []
            }
            
            # ÂàÜÁ±ª
            remaining_types = set(client.supported_types)
            for category, types in categories.items():
                found_types = [t for t in types if t in remaining_types]
                if found_types:
                    print(f"\n{category}: {', '.join(found_types)}")
                    remaining_types -= set(found_types)
            
            # ÂÖ∂‰ªñÁ±ªÂûã
            if remaining_types:
                categories["ÂÖ∂‰ªñ"] = sorted(remaining_types)
                print(f"\nÂÖ∂‰ªñ: {', '.join(categories['ÂÖ∂‰ªñ'])}")
            
            print(f"\nÊÄªËÆ°: {len(client.supported_types)} ÁßçÊ†ºÂºè")
            
    except Exception as e:
        print(f"‚ùå Ëé∑ÂèñÊîØÊåÅÁ±ªÂûãÂ§±Ë¥•: {e}")


async def main():
    """‰∏ªÂáΩÊï∞"""
    parser = create_parser()
    args = parser.parse_args()
    
    # ÊµãËØïËøûÊé•Ê®°Âºè
    if args.test:
        success = await test_connection(args.host, args.port)
        sys.exit(0 if success else 1)
    
    # ÂàóÂá∫ÊîØÊåÅÁ±ªÂûãÊ®°Âºè  
    if args.list_types:
        await list_supported_types(args.host, args.port)
        sys.exit(0)
    
    # Ê£ÄÊü•ÂøÖÈúÄÂèÇÊï∞
    if not args.input:
        print("‚ùå ÈîôËØØ: ÂøÖÈ°ªÊåáÂÆöËæìÂÖ•ÁõÆÂΩï (--input)")
        parser.print_help()
        sys.exit(1)
    
    input_path = Path(args.input)
    if not input_path.exists():
        print(f"‚ùå ÈîôËØØ: ËæìÂÖ•ÁõÆÂΩï‰∏çÂ≠òÂú®: {input_path}")
        sys.exit(1)
    
    # ËÆæÁΩÆËæìÂá∫ÁõÆÂΩï
    output_path = Path(args.output) if args.output else input_path.parent / "converted_files"
    
    # ÈùôÈªòÊ®°ÂºèËÆæÁΩÆ
    if args.quiet:
        import logging
        logging.getLogger().setLevel(logging.WARNING)
    
    try:
        # ÂàõÂª∫ÂÆ¢Êà∑Á´Ø
        client = ConvertClient(
            host=args.host,
            port=args.port, 
            timeout=args.timeout,
            max_retries=args.retries
        )
        
        print(f"üöÄ ÂºÄÂßãÊâπÈáèËΩ¨Êç¢")
        print(f"   ÊúçÂä°Á´Ø: {args.host}:{args.port}")
        print(f"   ËæìÂÖ•: {input_path}")
        print(f"   ËæìÂá∫: {output_path}")
        print(f"   Âπ∂ÂèëÊï∞: {args.workers}")
        print(f"   ÈÄíÂΩíÊêúÁ¥¢: {'ÊòØ' if args.recursive else 'Âê¶'}")
        print("=" * 50)
        
        # ÊâßË°åËΩ¨Êç¢
        results = await client.convert_directory(
            directory=input_path,
            output_dir=output_path,
            max_workers=args.workers,
            recursive=args.recursive,
            save_results=not args.no_save_results
        )
        
        # ÁÆÄË¶ÅÁªìÊûú
        success_count = sum(1 for r in results if r.status == "success")
        error_count = len(results) - success_count
        
        if success_count > 0:
            print(f"\nüéâ ËΩ¨Êç¢ÂÆåÊàêÔºÅÊàêÂäüËΩ¨Êç¢ {success_count} ‰∏™Êñá‰ª∂")
            
            if not args.quiet:
                print("ÊàêÂäüÁöÑÊñá‰ª∂:")
                for result in results:
                    if result.status == "success":
                        file_name = Path(result.original_file).name
                        print(f"  ‚úÖ {file_name}")
        
        if error_count > 0:
            print(f"\n‚ö†Ô∏è {error_count} ‰∏™Êñá‰ª∂ËΩ¨Êç¢Â§±Ë¥•:")
            for result in results:
                if result.status == "error":
                    file_name = Path(result.original_file).name
                    print(f"  ‚ùå {file_name}: {result.error}")
        
        sys.exit(0 if error_count == 0 else 1)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Áî®Êà∑‰∏≠Êñ≠Êìç‰Ωú")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå ÊâßË°åÂ§±Ë¥•: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())